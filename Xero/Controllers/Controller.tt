<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(SolutionDir)\Xero\bin\Xero.Api.dll" #>
<#@ import namespace="Xero.Api.Core" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".txt" #>

using System;
using System.Collections.Generic;
using System.Web.Http;
using GD.Links.Xero.Api.Core.Model;
using GD.Links.Xero.Services;


namespace GD.Links.Xero.Controllers
{

<#

var endpoints = typeof(XeroCoreApi).GetProperties().Where(x => x.PropertyType.Namespace == "Xero.Api.Core.Endpoints" && x.PropertyType.GetMembers().Any(y => y.Name == "Find") && x.PropertyType.GetMembers().Any(y => y.Name == "Create") && x.PropertyType.GetMembers().Any(y => y.Name == "Update"));
foreach (var endpoint in endpoints)
{
	var name = endpoint.Name;
	var methods = endpoint.PropertyType.GetMethods().Where(x => x.Name == "Update" || x.Name == "Find" || x.Name == "Create");
#>
		public class <#=name#>Controller : ApiController
		{
			private readonly IApiService _service;

			public <#=name#>Controller(IApiService service)
			{
				_service = service;
			}

		<#
		foreach(var method in methods)
		{
			string action;
			string returnType;
			string parameterType = String.Empty;
			string parameterName = String.Empty;
			
			switch(method.Name)
			{
				case "Update":
					action = "Put";
					break;
				case "Find":
					action = "Get";
					break;
				case "Create":
					action = "Post";
					break;
				default:
					action = "fuck";
					break;
			}

			if(method.ReturnType.GenericTypeArguments.Length == 1)
			{
				//Assume it's an IEnumerable
				var returnTypeSegments = method.ReturnType.GenericTypeArguments[0].FullName.Split('.');
				returnType = String.Format("IEnumerable<{0}>", returnTypeSegments[returnTypeSegments.Length - 1]);
			}

			else
			{
				returnType = method.ReturnType.Name;
			}

			

			var parameter = method.GetParameters().FirstOrDefault();

			if(parameter != null && parameter.ParameterType.GenericTypeArguments.Length == 1)
			{
				//Assume it's an IEnumerable
				var parameterTypeSegments = parameter.ParameterType.GenericTypeArguments[0].FullName.Split('.');
				parameterType = String.Format("IEnumerable<{0}>", parameterTypeSegments[parameterTypeSegments.Length - 1]);
				parameterName = (parameterTypeSegments[parameterTypeSegments.Length - 1] + "s").ToLower();
			}

			else if (parameter != null)
			{
				parameterType = parameter.ParameterType.Name;
				parameterName = parameter.ParameterType.Name;
			}



			//Setup route
			string route = "api/" + name;

			if(!String.IsNullOrEmpty(parameterName))
			{
				route = route + "/{" + parameterName + "}";
			}

			//Skip the absurd case for finding by Guid in Inbox endpoint
			if(returnType == "Folder" && action == "Get" && parameterType == "Guid" && name == "Inbox")
			{
				continue;
			}

			//and with duplicate files commands
			if(name == "Files" && action == "Get" && parameterType == String.Empty && parameterName == String.Empty)
			{
				continue;
			}

			if(name == "Files" && action == "Get" && parameterType == "Guid")
			{
				continue;
			}

			//and with duplicate folder command
			if(name == "Folders" && action == "Get" && parameterType == String.Empty && parameterName == String.Empty)
			{
				continue;
			}

			//and with tracking categories commands
			if(name == "TrackingCategories" && action == "Put" && parameterType == "TrackingCategory")
			{
				continue;
			}

			//and we're only doing GUIDs for GETs, not strings
			if(action == "Get" && parameterType == "String")
			{
				continue;
			}
		#>
	
			// <#=action.ToUpper()#>: api/<#=name#>
			public <#= returnType #> <#=action#>(<#=parameterType#> <#=parameterName#>)
			{
				return _service.Api.<#=name#>.<#=method.Name#>(<#=parameterName#>);
			}

		<#
		// /Foreach for update methods
		}
		#>
}

<#
}	
#>
}